import { Link, usePage } from "@inertiajs/react";
import { useState } from "react";
import { 
  Building2, 
  ChevronDown,
  ChevronRight, 
  FileText, 
  LayoutDashboard, 
  Plus, 
  Settings, 
  Ticket, 
  Users,
  Mail,
  MessageSquare,
  Calendar
} from "lucide-react";
import { cn } from "@/lib/utils";
import ApplicationLogo from "./ApplicationLogo";
import { Button } from "./ui/button";
import { Badge } from "./ui/badge";

interface SidebarProps {
  className?: string;
}

export default function SidebarSneat({ className }: SidebarProps) {
  const { auth } = usePage().props as any;
  const isSuperAdmin = auth?.user?.is_super_admin === true;
  const [dashboardExpanded, setDashboardExpanded] = useState(false);
  
  return (
    <div className={cn("h-screen w-64 flex-shrink-0 bg-white border-r border-gray-200 flex flex-col shadow-sm", className)}>
      {/* Logo */}
      <div className="p-6 pb-4 flex items-center justify-center">
        <Link href="/">
          <ApplicationLogo className="h-10 w-auto fill-current text-primary" />
        </Link>
      </div>

      {/* Botão Novo Ticket */}
      <div className="px-4 pb-4">
        <Link href={route("tickets.create")}>
          <Button 
            className="w-full bg-[#03c3ec] hover:bg-[#03c3ec]/90 text-white font-medium shadow-sm shadow-[#03c3ec]/20 rounded-lg h-10"
          >
            <Plus className="mr-2 h-4 w-4" />
            Novo Ticket
          </Button>
        </Link>
      </div>

      {/* Navigation Links */}
      <nav className="flex-1 overflow-y-auto px-3 space-y-1">
        {/* Dashboard Retrátil */}
        <button
          onClick={() => setDashboardExpanded(!dashboardExpanded)}
          className={cn(
            "w-full flex items-center gap-3 px-3 py-2.5 rounded-lg text-sm font-medium transition-all duration-200 group",
            route().current("dashboard")
              ? "bg-[#03c3ec]/10 text-[#03c3ec] border-l-4 border-[#03c3ec]"
              : "text-gray-600 hover:bg-gray-50 hover:text-gray-900"
          )}
        >
          <span className={cn(
            "transition-colors",
            route().current("dashboard") ? "text-[#03c3ec]" : "text-gray-400 group-hover:text-gray-600"
          )}>
            <LayoutDashboard className="h-5 w-5" />
          </span>
          <span className="flex-1 text-left">Dashboard</span>
          <Badge variant="destructive" className="h-5 min-w-5 px-1.5 text-xs rounded-full">
            5
          </Badge>
          {dashboardExpanded ? (
            <ChevronDown className="h-4 w-4" />
          ) : (
            <ChevronRight className="h-4 w-4" />
          )}
        </button>
        
        {dashboardExpanded && (
          <div className="pl-8 space-y-1">
            <SubNavItem label="Pré-tickets" href={route("dashboard")} />
            <SubNavItem label="Autorizações" href="#" />
            <SubNavItem label="Tickets em revisão" href="#" />
            <SubNavItem label="Tickets fechados" href="#" />
          </div>
        )}

        <NavItem
          href={route("tickets.index")}
          icon={<Ticket className="h-5 w-5" />}
          label="Tickets"
          active={route().current("tickets.*")}
          hasSubmenu
        />
        
        <NavItem
          href={route("clients.index")}
          icon={<Users className="h-5 w-5" />}
          label="Clientes"
          active={route().current("clients.*")}
          hasSubmenu
        />
        
        <NavItem
          href={route("contracts.index")}
          icon={<FileText className="h-5 w-5" />}
          label="Contratos"
          active={route().current("contracts.*")}
          hasSubmenu
        />

        {/* Apps & Pages Section */}
        <div className="pt-6 pb-2">
          <span className="px-3 text-xs font-semibold text-gray-400 uppercase tracking-wider">
            Apps & Pages
          </span>
        </div>

        <NavItem
          href="#"
          icon={<Mail className="h-5 w-5" />}
          label="Email"
        />
        
        <NavItem
          href="#"
          icon={<MessageSquare className="h-5 w-5" />}
          label="Chat"
        />
        
        <NavItem
          href="#"
          icon={<Calendar className="h-5 w-5" />}
          label="Calendar"
        />
        
        <NavItem
          href={route("settings.index")}
          icon={<Settings className="h-5 w-5" />}
          label="Configurações"
          active={route().current("settings.*")}
          hasSubmenu
        />

        {/* Super Admin Section */}
        {isSuperAdmin && (
          <>
            <div className="pt-6 pb-2">
              <span className="px-3 text-xs font-semibold text-gray-400 uppercase tracking-wider">
                Super Admin
              </span>
            </div>
            <NavItem
              href={route("superadmin.tenants.index")}
              icon={<Building2 className="h-5 w-5" />}
              label="Plataforma"
              active={route().current("superadmin.*")}
              hasSubmenu
            />
          </>
        )}
      </nav>

      {/* Footer */}
      <div className="p-4 border-t border-gray-200">
        <div className="text-xs text-gray-400 text-center font-medium">
          Sincro8 Tickets v1.0
        </div>
      </div>
    </div>
  );
}

interface NavItemProps {
  href: string;
  icon: React.ReactNode;
  label: string;
  active?: boolean;
  badge?: number;
  hasSubmenu?: boolean;
}

function NavItem({ href, icon, label, active, badge, hasSubmenu }: NavItemProps) {
  return (
    <Link
      href={href}
      className={cn(
        "flex items-center gap-3 px-3 py-2.5 rounded-lg text-sm font-medium transition-all duration-200 group",
        active
          ? "bg-[#03c3ec]/10 text-[#03c3ec] border-l-4 border-[#03c3ec]"
          : "text-gray-600 hover:bg-gray-50 hover:text-gray-900"
      )}
    >
      <span className={cn(
        "transition-colors",
        active ? "text-[#03c3ec]" : "text-gray-400 group-hover:text-gray-600"
      )}>
        {icon}
      </span>
      <span className="flex-1">{label}</span>
      {badge && (
        <Badge variant="destructive" className="h-5 min-w-5 px-1.5 text-xs rounded-full">
          {badge}
        </Badge>
      )}
      {hasSubmenu && (
        <ChevronRight className={cn(
          "h-4 w-4 transition-colors",
          active ? "text-[#03c3ec]" : "text-gray-400 group-hover:text-gray-600"
        )} />
      )}
    </Link>
  );
}

interface SubNavItemProps {
  label: string;
  active?: boolean;
}

function SubNavItem({ label, active }: SubNavItemProps) {
  return (
    <Link
      href="#"
      className={cn(
        "flex items-center gap-3 py-2 text-sm transition-colors",
        active
          ? "text-[#03c3ec] font-medium"
          : "text-gray-500 hover:text-gray-900"
      )}
    >
      <span className={cn(
        "h-1.5 w-1.5 rounded-full",
        active ? "bg-[#03c3ec]" : "bg-gray-300"
      )} />
      {label}
    </Link>
  );
}
